{"version":3,"sources":["getWeb3.js","components/Header.js","components/ContractStatus.js","components/ProposalsRegistrationStarted.js","components/RegisteringVoters.js","components/ProposalsRegistrationEnded.js","components/VotesTallied.js","components/VotingSessionEnded.js","components/VotingSessionStarted.js","components/ContractInteraction.js","components/Voters.js","components/Proposals.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","on","location","reload","enable","console","log","provider","providers","HttpProvider","Header","this","props","addr","React","Component","ProposalRegistrationStartedInteraction","handleOnChange","e","setState","target","name","value","handleSubmit","preventDefault","component","contract","methods","addProposal","state","inputValue","send","from","account","once","hash","error","interactionResult","message","then","receipt","addedProposalId","events","ProposalRegistered","returnValues","proposalId","setTimeout","handleSubmitWorkflowChange","endProposalsRegistering","endRegisteringResult","contractStatus","onSubmit","className","htmlFor","id","type","onChange","RegisteringVotersInteraction","handleOnChangeVoterInput","handleSubmitVoter","addVoter","utils","toChecksumAddress","addVoterResult","addedVoterAddress","VoterRegistered","voterAddress","startProposalsRegistering","startRegisteringResult","pattern","class","ProposalsRegistrationEndedInteraction","startVotingSession","startVotingResult","VotesTalliedInteraction","restartProcess","call","loadWinningProposalId","winningProposalID","result","winningProposalId","catch","err","VotingSessionEndedInteraction","tallyVotes","tallyVotesResult","VotingSessionStartedInteraction","loadProposals","getPastEvents","fromBlock","toBlock","results","proposals","forEach","push","length","selectedProposal","onProposalSelect","setVote","voter","Voted","votedProposal","endVotingSession","endVotingResult","map","key","workflowStatusString","ContractInteraction","Number","workflowStatus","App","useState","isOwner","isVoter","accounts","owner","contractState","setContractState","useEffect","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","alert","onClick","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed8b63b6.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          window.ethereum.on('accountsChanged', function () {\n            // it would be better to reload the state\n            window.location.reload();\n          });\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log('Injected web3 detected.');\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\nimport NavbarCollapse from 'react-bootstrap/esm/NavbarCollapse';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n     <b> Connected wallet : {this.props.addr} <br/></b> \n    );\n  }\n}\n","import React from 'react';\n\nexport default class ContractStatus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h3>Contract address: {this.props.contractAddress}</h3>\n        <h3>Contract owner: {this.props.contractOwner}</h3>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\"\n\nexport default class ProposalRegistrationStartedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputValue: null, interactionResult: \"-\" };\n  }\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.addProposal(this.state.inputValue).send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ interactionResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        let addedProposalId = receipt.events.ProposalRegistered.returnValues.proposalId;\n        component.setState({ interactionResult: \"Proposal #\" + addedProposalId + \" has been added!\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.endProposalsRegistering().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ endRegisteringResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ endRegisteringResult: \"Voting contract is now in proposal registering ended state\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Current Workflow Status : {this.props.contractStatus}</h4>\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <label htmlFor=\"proposalDesc\">Proposal description: </label>\n          <span><input id=\"proposalDesc\" type=\"text\" name='inputValue' onChange={this.handleOnChange} className=\"input\" />\n          </span>\n          &nbsp;\n          <input type=\"submit\" value=\"Add proposal\" className=\"button\" />\n        </form>\n        &nbsp;\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"End proposal registering\" className=\"button\" />\n        </form>\n        &nbsp;\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\"\nimport Web3 from 'web3';\n\nexport default class RegisteringVotersInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputValue: null, addVoterResult: \"-\", startRegisteringResult: \"-\" };\n  }\n\n  handleOnChangeVoterInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmitVoter = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.addVoter(Web3.utils.toChecksumAddress(this.state.inputValue)).send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ addVoterResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        let addedVoterAddress = receipt.events.VoterRegistered.returnValues.voterAddress;\n        component.setState({ addVoterResult: addedVoterAddress + \" has been added as a voter!\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.startProposalsRegistering().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ startRegisteringResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ startRegisteringResult: \"Voting contract is now in proposal registering started state\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n\n    return (\n      <div >\n        <h4>Current Workflow Status : {this.props.contractStatus}</h4>\n        <form onSubmit={this.handleSubmitVoter} className=\"form\">\n          <label htmlFor=\"voterAddress\">Voter Address:</label>    \n           <span> <input id=\"voterAddress\" type=\"text\" name='inputValue' onChange={this.handleOnChangeVoterInput} pattern=\"^0x[a-fA-F0-9]{40}$\" className=\"input\" />\n           </span>\n           &nbsp;\n          <input type=\"submit\" value=\"Add voter\" className=\"button\" />\n\n        </form>\n        &nbsp;\n\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\" class=\"center\">\n          <input type=\"submit\" value=\"Start proposal registering\" className=\"button\" />\n        </form>\n&nbsp;      </div>\n    )\n  }\n}","import React, { Component } from \"react\"\n\nexport default class ProposalsRegistrationEndedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.startVotingSession().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ startVotingResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ startVotingResult: \"Voting contract is now in voting session started state\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Current Workflow Status : {this.props.contractStatus}</h4>\n\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"Start voting session\" className=\"button\" />\n        </form>\n      </div>\n    )\n  }\n\n}","import React, { Component } from \"react\"\n\nexport default class VotesTalliedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { winningProposalId: null };\n\n    this.loadWinningProposalId();\n  }\n\n  restartProcess = async () => {\n    await this.state.contract.methods.restartProcess().call({ from: this.props.account });\n    window.location.reload(false);\n  }  \n\n  loadWinningProposalId = async () => {\n    this.props.contract.methods.winningProposalID().call({ from: this.props.account })\n      .then((result) => {\n        this.setState({winningProposalId: result});\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n\n       \n  }\n\n\n  \n  render() {\n    return (\n      <div>\n        <h4>Current Workflow Status : {this.props.contractStatus}</h4>\n        <b>The winning proposal is {this.state.winningProposalId == null ? '...' : '#' + this.state.winningProposalId + ' !'}</b>\n        &nbsp;<br/>\n        &nbsp;<br/>\n\n      </div>\n    );\n  }\n\n}","import React, { Component } from \"react\"\n\nexport default class VotingSessionEndedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.tallyVotes().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ tallyVotesResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ tallyVotesResult: \"Votes are tallied !\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Current Workflow Status : {this.props.contractStatus}</h4>\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"Tally votes !\" className=\"button\" />\n        </form>\n        &nbsp;\n        <b>Results: {this.state.tallyVotesResult}</b>\n      </div>\n    )\n  }\n\n}","import React, { Component } from \"react\"\n\nexport default class VotingSessionStartedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { selectedProposal: null, proposals: [] };\n    this.loadProposals();\n  }\n\n  loadProposals = async () => {\n    this.props.contract.getPastEvents('ProposalRegistered', { fromBlock: 0, toBlock: 'latest' })\n      .then((results) => {\n        let proposals = [];\n        results.forEach(async (result) => {\n          proposals.push(result.returnValues.proposalId);\n          this.setState({ proposals: proposals });\n        })\n        // this.setState({ proposals: proposals });\n        if (this.state.proposals.length > 0) {\n          this.setState({ ...this.state.proposals, selectedProposal: this.state.proposals[0] })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  onProposalSelect = e => {\n    this.setState({ selectedProposal: e.target.value })\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.setVote(this.state.selectedProposal).send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ interactionResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        let voter = receipt.events.Voted.returnValues.voter;\n        let votedProposal = receipt.events.Voted.returnValues.proposalId;\n        component.setState({ interactionResult: \"User \" + voter + \" voted for proposal #\" + votedProposal });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.endVotingSession().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ endVotingResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ endVotingResult: \"Voting contract is now in voting session ended state\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Current Workflow Status : {this.props.contractStatus}</h4>\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <label htmlFor=\"proposals\">Vote for proposal: </label>\n          <span>\n          <select name=\"proposals\" id=\"proposals\" onChange={this.onProposalSelect}>\n            {this.state.proposals.map((proposalId) =>\n              <option key={proposalId} value={proposalId}>#{proposalId}</option>\n            )}\n          </select></span>\n          &nbsp;\n          <input type=\"submit\" value=\"Vote\" className=\"button\" />\n        </form>&nbsp;\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"End voting session\" className=\"button\" />\n        </form>\n      </div>\n    )\n  }\n\n}","import React from 'react';\nimport ProposalRegistrationStartedInteraction from './ProposalsRegistrationStarted';\nimport RegisteringVotersInteraction from './RegisteringVoters';\nimport ProposalsRegistrationEndedInteraction from './ProposalsRegistrationEnded';\nimport VotesTalliedInteraction from './VotesTallied';\nimport VotingSessionEndedInteraction from './VotingSessionEnded';\nimport VotingSessionStartedInteraction from './VotingSessionStarted';\n\nconst workflowStatusString = [\n  'Registering Voters',\n  'Proposals Registration Started',\n  'Proposals Registration Ended',\n  'Voting Session Started',\n  'Voting Session Ended',\n  'Votes Tallied',\n];\n\n\nexport default class ContractInteraction extends React.Component {\n\n  render() {\n    const InteractionComponent = () => {\n      switch (Number(this.props.workflowStatus)) {\n        case 0:\n          return <RegisteringVotersInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            />;\n        case 1:\n          return <ProposalRegistrationStartedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            />;\n        case 2:\n          return <ProposalsRegistrationEndedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            />;\n        case 3:\n          return <VotingSessionStartedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n             />;\n        case 4:\n          return <VotingSessionEndedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n           />;\n        case 5:\n          return <VotesTalliedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n             />;\n        default:\n          console.log('Workflow status: ' + this.props.workflowStatus);\n          return <p>Unknown workflow status!</p>;\n      }\n    };\n\n    return (\n      <div >\n        <InteractionComponent />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\"\n\nexport default class Voters extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { voters: [] };\n    this.loadVoters();\n    this.loadVotes();\n  }\n\n  loadVotes = async () => {\n\n    this.props.contract.getPastEvents('Voted', { fromBlock: 0, toBlock: 'latest' })\n      .then((results) => {\n        //let voters = [];\n        results.forEach(async (result) => {\n          console.log(result);\n          // let voterInfo = await this.props.contract.methods.getVoter(result.address).call({ from: this.props.account });\n          // voters.push({ address: result.returnValues.voterAddress, info: voterInfo });\n          // console.log(voterInfo);\n          // this.setState({ voters: voters });\n        });\n\n        // this.setState({ voters: voters });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  loadVoters = async () => {\n    this.props.contract.getPastEvents('VoterRegistered', { fromBlock: 0, toBlock: 'latest' })\n      .then((results) => {\n        let voters = [];\n        results.forEach(async (result) => {\n          let voterInfo = await this.props.contract.methods.getVoter(result.returnValues.voterAddress).call({ from: this.props.account });\n          voters.push({ address: result.returnValues.voterAddress, info: voterInfo });\n          this.setState({ voters: voters });\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Registered voters</h4>\n        <table style={{ border: '1px solid black', marginLeft: 'auto', marginRight: 'auto' }}>\n          <thead>\n            <tr>\n              <th>Address</th>\n              <th>Has voted</th>\n              <th>Voted for proposal</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.voters.map(voterDetails =>\n              <tr key={voterDetails.address}>\n                <td>{voterDetails.address}</td>\n                <td>{voterDetails.info.hasVoted ? 'Yes' : 'No'}</td>\n                <td>{voterDetails.info.hasVoted ? '#' + voterDetails.info.votedProposalId : '-'}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div >\n    )\n  }\n}","import React, { Component } from \"react\"\n\nexport default class Proposals extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { proposals: [] };\n    this.loadProposals();\n  }\n\n  loadProposals = async () => {\n    this.props.contract.getPastEvents('ProposalRegistered', { fromBlock: 0, toBlock: 'latest' })\n      .then((results) => {\n        let proposals = [];\n        results.forEach(async (result) => {\n          let proposalInfo = await this.props.contract.methods.getOneProposal(result.returnValues.proposalId).call({ from: this.props.account });\n          proposals.push({ proposalId: result.returnValues.proposalId, info: proposalInfo });\n          console.log(proposalInfo);\n          this.setState({ proposals: proposals });\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Proposals</h4>\n        <table style={{ border: '1px solid black', marginLeft: 'auto', marginRight: 'auto' }}>\n          <thead>\n            <tr>\n              <th>Number</th>\n              <th>Description</th>\n              <th>Vote count</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.proposals.map(proposalDetails =>\n              <tr key={proposalDetails.proposalId}>\n                <td>#{proposalDetails.proposalId}</td>\n                <td>{proposalDetails.info.description}</td>\n                <td>{proposalDetails.info.voteCount}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}","import React, { useEffect, useState } from 'react';\nimport VotingContract from './contracts/Voting.json';\nimport getWeb3 from './getWeb3';\n\nimport './App.css';\nimport Header from './components/Header';\nimport ContractStatus from './components/ContractStatus';\nimport ContractInteraction from './components/ContractInteraction';\nimport Voters from './components/Voters';\nimport Proposals from './components/Proposals';\n\nfunction App() {\n  const [state, setState] = useState({ isOwner: false, isVoter: false, web3: null, accounts: null, contract: null });\n  const [contractState, setContractState] = useState({\n    owner: '',\n    workflowStatus: 0\n    // events: { voterRegistered: [], workflowStatusChange: [], proposalRegistered: [], voted: [] },\n  });\n  const restartProcess = async () => {\n    await state.contract.methods.restartProcess().send({ from: state.accounts[0] });\n    window.location.reload(false);\n  }\n  useEffect(() => {\n    (async function () {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        console.log(VotingContract.networks);\n        console.log(networkId);\n        const instance = new web3.eth.Contract(VotingContract.abi, deployedNetwork && deployedNetwork.address);\n\n        console.log(instance.methods);\n\n        let workflowStatus = await instance.methods.workflowStatus().call();\n        let owner = await instance.methods.owner().call();\n        setContractState({ owner: owner, workflowStatus: workflowStatus });\n\n        //let value = await instance.methods.get().call();\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        setState({ web3: web3, accounts: accounts, contract: instance });\n      } catch (error) {\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  if (!state.web3) {\n    return <div>Loading Web3, accounts, and contract...</div>;\n  } else {\n    return (\n      <div className=\"App\">\n        <div class=\"center\">\n        <h1  >Voting DAPP</h1>\n        </div>\n\n        <Header addr={state.accounts[0]} />\n      &nbsp;\n        <ContractInteraction\n          workflowStatus={contractState.workflowStatus}\n          account={state.accounts[0]}\n          contract={state.contract}\n        />\n        <br/>\n        <span>\n        <button class=\"button\" onClick ={restartProcess}>Restart Process</button>\n        </span>\n        \n      </div>\n    );\n  }\n}\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable eqeqeq */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}